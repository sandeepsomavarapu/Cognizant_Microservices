


Day-1 : 14-08-2023
=================

Spring Framework:
=================

framework
		invasive		Struts 
		
		non-invasive 	spring,hibernate




Servlet,EJB--heavy weight component


class Login  
{

//12 

}
1*12=12
100*12=1200

	rod johnson --> 2003 1.x
						 5.x
						 6.x


	interface21 --->spring framework
	
		light weight ,loosley coupled
	
	spring is non-invasive framework which is used to create light weight and loosley coupled application
	
	
	class A
	{
			A(String name)
			{
			
			}
			
			m1()
			{
			
			}
	}

	class B
	{
		
	B()
	{
A a;
	a.m1()
	}
	
	
	}
		Spring :loosley coupled -->spring container 
		
		Life Cycle Object
				Creation of object
				wiring the object
				configuring 
				destroying 
		
		BeanFactory			-->Lazy intializer
		ApplicationContext -->Eager Intializer 
		
		
		20+
		Spring CORE--->dependency injection module /IOC
							
							setter injection				configuration -->xml config,annotation config,java config
							constructor injection
							autowiring 
			
			@
		NOTE:
spring has given annotations like @component,@Service,@Repository,@ComponentScan,@Configuration,@Autowired for 
user defined classes but not for predefined classes 
					DB-datasource,view resolver,EntityManager,EntityManagerFactory,Transaction.........
			
			xml,java 	@Bean
			
			Spring Boot-->
			
				1)auto configuration	:most of the commonly used classes already configured by the spring boot
				2)embeded server tomcat :8080
				3)starters				:maven  bundle jars 
				4)Actuators				:end point url health,env,beans.......
			
				springbootstarter-jpa 60 jars 
			
		spring jdbc
				orm
				security
				web
				aop
				..
				.
				
	Spring Boot:
================	
		STS-->spring tool suite		-->pivotal
		
		
		
		
		
		ProductManagementApplications:
		==============================
		
				1)Add Product
				2)Update Product
				3)Delete Product
				4)Get Product
				5)GetAll Products
		
								JSON   key:value
		webservices: 		APP <---> App
		-------------
		
		X ATM machine-->bank application
		
		
		SBI atm card
		
				
				SOAP -->XML
				
				REST-->XML,JSON,pt,html,js
		
		Employee emp=new Employee(123,"sandeep",2300,"rps");
		
		Jackson api			jax-b
				JSON
		
				{
				"eid":123,
				"ename":"sandeep",
				"esal":2300,
				"orgName":"rps"

				}
		
springboot rest


			POSTMAN
			
Microservices:
=============	Monolithic		
			
	NOTE:
		Decompose/split/devide  your large project into smaller services later communicate them..
			
			
			
			
			Independently Deployeable
			
			
	ShoppingCart
			-->5 projects
				4 microservices
				1 -UI
			
			
			microservice <--->microservice
			
			
			ecart MS<--> order 		
			
			
			two types communication
			
				1)Asynchronous     messaging protocols (kafka,rabitmq,activemq.....)
				
				2)Synchronous       RestTemplate
			
			
			
		</dependency>
			<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc8</artifactId>
			<scope>runtime</scope>
		</dependency>
			
			
			
Principles  of microservices:
============================

	SOLID--one and only one  reposibility for each microservice

business-functionality


Independently Deployeable



			
Spring Cloud:
=============		
			
		Use Fault Tolerance techniques	
			
			
				circuit breaker pattern 
				
					2
				
		Netflix	Hystrix	
				
				starters
				
				
				spring-boot-starter-jpa
				
				
				spring-cloud-starter-hystrix
				
				
				spring-cloud-starter-hystrix-dashboard
				
				
		@EnableCircuitBreaker		
		
		@EnableHystrixDashBoard		
				
		@HystrixCommand(fallbackmethod="myfbmethod")	
				
				
				
				student microservice		8098
				
				school microservice			9098 hystrix
				
				
				
				
			